#!/usr/bin/env ruby

require 'term/ansicolor'
require 'json'

include Term::ANSIColor

mainpath       = '/Users/jonathan.starr/.learn/lib'
readme         = File.read("#{mainpath}/readme.md").split(/\n/)
topics         = {}
current_topic  = ''

$manifest_file = "#{mainpath}/.scripts/manifest.json"
$manifest      = JSON.parse(File.read($manifest_file))

readme.each do |line|
  if line.include? '###'
    current_topic = line.gsub('#','')    
    topics[current_topic] = []
  else
    topics[current_topic] << line if topics[current_topic] unless line.include? 'objective'
  end
end

def test(index,topics)
  steps = topics.values[index]
  steps.each do |step|
    tick = '`'
    code = step[/#{tick}(.*?)#{tick}/,1]

    if code 
      puts step.gsub(code, code.bright_green).gsub('`',' ')  
    else
      puts step
    end
  end

  $manifest[index] ||= {
    comments: [],
    comfort: 0
  }
end

def shutdown
  File.write($manifest_file, JSON.generate($manifest))
  puts 'closing'
  exit
end

def add_comment

end

# main entry point of the test

topic = ARGV.first.to_i
topic ||= 0

while true
  system 'clear'
  header = topics.keys[topic]
  puts "[#{topic}] - #{header}".yellow
  puts ''
  puts "[press any key]".red
  $stdin.gets()
  test(topic, topics)  
  puts '-'*80
  puts "[comment] add a comment".yellow
  puts "[comfort] choose a comfort level (1-10)".cyan
  puts "[quit] next topic".red
  puts "[enter] next topic".green
  command = $stdin.gets().chop
  topic += 1

  # parse options
  case command
  when 'quit'
    shutdown
  when 'comment'
    add_comment
  end

end

